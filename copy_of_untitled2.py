# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tI_yliQ4qsDmAq8jFkA1m4r9owq8XDWc
"""

# %%
# 1. Actionable Strategy: Regression Model Implementation

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# %%
# Load the dataset
df = pd.read_csv("/content/drive/MyDrive/Pradeep ML project /Maternal Health Risk Data Set.csv")

df.head()

from google.colab import drive
drive.mount('/content/drive')

# %%
# Encode categorical target variable (RiskLevel)
risk_level_mapping = {'low risk': 0, 'mid risk': 1, 'high risk': 2}
df['RiskLevelEncoded'] = df['RiskLevel'].map(risk_level_mapping)

df.head()

# %%
# Select feature and target
X = df[['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']]
y = df['RiskLevelEncoded']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Model prediction
y_pred = model.predict(X_test)

# Display the model output
print("Model trained successfully.")

# %%
# Get feature names
feature_names = ['Age', 'SystolicBP', 'DiastolicBP', 'BS', 'BodyTemp', 'HeartRate']

# Decode Risk Levels for plotting
risk_level_mapping = {0: 'low risk', 1: 'mid risk', 2: 'high risk'}
y_labels = [risk_level_mapping[i] for i in y]

# Example data: Replace with your actual features and coefficients
feature_importance = {
    'BodyTemp': 0.173,
    'BS': 0.110,
    'SystolicBP': 0.015,
    'HeartRate': 0.013,
    'DiastolicBP': 0.001,
    'Age': 0.0005
}

# Convert to DataFrame
df = pd.DataFrame(list(feature_importance.items()), columns=['Feature', 'Coefficient'])
df = df.sort_values(by='Coefficient', ascending=False)

# Plot
plt.figure(figsize=(10, 5))
plt.barh(df['Feature'], df['Coefficient'])
plt.xlabel('Coefficient Value')
plt.ylabel('Feature')
plt.title('Feature Importances')
plt.gca().invert_yaxis()  # Highest importance on top
plt.tight_layout()
plt.show()

# Save the plot
# plt.savefig("feature_importance_plot.png")
plt.show()



# %%
# Refit the regression model for BodyTemp
X_bodytemp = df[['BodyTemp']]
y = df['RiskLevelEncoded']

model_bodytemp = LinearRegression()
model_bodytemp.fit(X_bodytemp, y)

# Plotting BodyTemp vs RiskLevel with regression line
plt.figure(figsize=(8, 6))
plt.scatter(df['BodyTemp'], y, color='blue', label='Data points')
plt.plot(df['BodyTemp'], model_bodytemp.predict(X_bodytemp), color='red', label='Regression line')
plt.title('Regression: BodyTemp vs. Risk Level')
plt.xlabel('Body Temperature')
plt.ylabel('Risk Level')
plt.yticks(list(range(3)), ['low risk', 'mid risk', 'high risk'])
plt.legend()
plt.show()

# Refit the regression model for BS
X_bs = df[['BS']]

model_bs = LinearRegression()
model_bs.fit(X_bs, y)

# Plotting BS vs RiskLevel with regression line
plt.figure(figsize=(8, 6))
plt.scatter(df['BS'], y, color='blue', label='Data points')
plt.plot(df['BS'], model_bs.predict(X_bs), color='red', label='Regression line')
plt.title('Regression: BS vs. Risk Level')
plt.xlabel('Blood Sugar')
plt.ylabel('Risk Level')
plt.yticks(list(range(3)), ['low risk', 'mid risk', 'high risk'])
plt.legend()
plt.show()

# Refit the regression model
model = LinearRegression()
model.fit(X, y)

# Plotting the regression line using Matplotlib
plt.figure(figsize=(8, 6))

# Redefine X to include only SystolicBP for this plot
X = df[['SystolicBP']]

plt.scatter(X, y, color='blue', label='Data points')

# Assuming you want to plot a regression line for SystolicBP as well
# You would need to refit the model with X = df[['SystolicBP']]
model_systolicbp = LinearRegression()
model_systolicbp.fit(X, y)
plt.plot(X, model_systolicbp.predict(X), color='red', label='Regression line')

plt.title('Regression: SystolicBP vs. Risk Level')
plt.xlabel('SystolicBP')
plt.ylabel('Risk Level')
plt.yticks(list(range(3)), ['low risk', 'mid risk', 'high risk'])
plt.legend()
plt.show()

# %%
# Refit the regression model
X = df[['BodyTemp', 'BS']]
y = df['RiskLevelEncoded']

model = LinearRegression()
model.fit(X, y)

# Sample data
body_temp = np.random.uniform(98, 103, 100)
blood_sugar = np.random.uniform(6, 18, 100)
risk_level = 0.5 * body_temp + 0.2 * blood_sugar + np.random.normal(0, 1, 100)

# Prepare data for regression
X = np.column_stack((body_temp, blood_sugar))
y = risk_level

# Fit regression model
model = LinearRegression()
model.fit(X, y)

# Create grid for surface
bt_range = np.linspace(body_temp.min(), body_temp.max(), 20)
bs_range = np.linspace(blood_sugar.min(), blood_sugar.max(), 20)
bt_grid, bs_grid = np.meshgrid(bt_range, bs_range)
Z = model.predict(np.column_stack((bt_grid.ravel(), bs_grid.ravel()))).reshape(bt_grid.shape)

# Plot
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Plot surface
ax.plot_surface(bt_grid, bs_grid, Z, cmap='coolwarm', alpha=0.5, label='Regression Surface')

# Plot data points
ax.scatter(body_temp, blood_sugar, risk_level, c='yellow', label='Data Points', edgecolors='k')

ax.set_xlabel('Body Temperature')
ax.set_ylabel('Blood Sugar')
ax.set_zlabel('Risk Level')
ax.set_title('Regression: BodyTemp, BS vs. Risk Level')

plt.legend()
plt.tight_layout()
plt.show()